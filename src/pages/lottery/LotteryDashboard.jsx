import { Card } from "../../components/cards/Card"
import { useMoralis, useWeb3Contract } from "react-moralis"
import { getNetworkName } from "../../utils/misc"
import { useState, useEffect } from "react"
import {
  Box,
  Center,
  VStack,
  HStack,
  Text,
  Heading,
  Button,
  Container,
  SimpleGrid,
  useToast,
} from "@chakra-ui/react"

import lotteryContractAbi from "../../contracts/localhost_SmartLottery0Kage.json"
import zeroKageLocalAbi from "../../contracts/localhost_ZeroKageMock.json"
import zeroKageGoerliAbi from "../../contracts/localhost_ZeroKageMock.json"
import addressList from "../../contracts/addresses.json"

import { ethers } from "ethers"
import { roundDecimals } from "../../utils/web3-formats"

import { ProtocolLotteryStats } from "../../components/graph/ProtocolLotteryStatsTable"

export const LotteryDashboard = () => {
  const { account, chainId } = useMoralis()
  const networkName = getNetworkName(chainId)
  const numChainId = parseInt(chainId)

  const lotteryAbi =
    networkName && networkName === "goerli"
      ? lotteryContractAbi
      : lotteryContractAbi

  const zKageAbi =
    networkName && networkName === "goerli"
      ? zeroKageGoerliAbi
      : zeroKageLocalAbi

  const [epoch, setEpoch] = useState(0)
  const [potSize, setPotSize] = useState("0")
  const [participants, setParticipants] = useState(0)
  const [isConfirming, setIsConfirming] = useState(false)

  const { runContractFunction, isLoading } = useWeb3Contract()
  const toast = useToast()

  //********************** USE EFFECT FUNCTIONS *****************//

  useEffect(() => {
    if (!chainId || !account) return

    getEpoch()
    // Promise.all([getEpoch()])
    //   .then(([epochVal]) => {
    //     setEpoch(epochVal)
    //   })
    //   .catch((e) => errorHandler(e))
    // Promise.all([getEpoch(), getPotSize(), getParticipants()])
    //   .then(([epochVal, potVal, participantsVal]) => {
    //     setEpoch(epochVal)
    //     setPotSize(roundDecimals(ethers.utils.formatEther(potVal), 6))
    //     setParticipants(participantsVal)
    //   })
    //   .catch((e) => errorHandler(e))
  }, [account, chainId])

  //------------------------------------------------------------//

  //********************** API FUNCTIONS *************************//
  const getEpoch = () => {
    const lotteryAddress = getLotteryAddress()
    const apiParams = { abi: lotteryAbi, contractAddress: lotteryAddress }

    const epochParams = {
      ...apiParams,
      functionName: "getEpoch",
      params: {},
    }
    console.log("epoch params", epochParams)

    runContractFunction({
      params: epochParams,
      onSuccess: (values) => {
        console.log("run epoch value", values)
      },
      onError: errorHandler,
    })
  }

  const getParticipants = () => {
    const lotteryAddress = getLotteryAddress()
    const apiParams = { abi: lotteryAbi, contractAddress: lotteryAddress }

    // get num participants
    const participantParams = {
      ...apiParams,
      functionName: "getPlayers",
      params: {},
    }

    return runContractFunction({
      params: participantParams,
    })
  }

  const getPotSize = async () => {
    const lotteryAddress = getLotteryAddress()
    const apiParams = { abi: lotteryAbi, contractAddress: lotteryAddress }
    // get end date
    const potParams = {
      ...apiParams,
      functionName: "getLotteryValue",
      params: {},
    }

    return runContractFunction({
      params: potParams,
    })
  }
  //------------------------------------------------------------//

  /*********************** CALLBACK HANDLERS ********************/
  /**
   * @notice handles errors generated by any API function
   * @param {any} e error description
   */
  const errorHandler = (e) => {
    // insert error notification here
    const errorMsg = e.message

    toast({
      title: `Error`,
      status: "error",
      description: errorMsg,
      isClosable: true,
      duration: 9000,
    })
    setIsConfirming(false)
    // insert error notification here
  }
  //------------------------------------------------------------//

  //********************** HELPER FUNCTIONS ************************* */
  const getLotteryAddress = () => {
    if (!chainId) return null
    const chainIdString = parseInt(chainId)
    return addressList[chainIdString]["SmartLottery0Kage"][0]
  }

  //--------------------------------------------------------------//

  return (
    <Box as="section" height="100vh" width="100%" overflowY="auto" mx="auto">
      {(!account || !chainId) && (
        <Heading as="h2" fontSize="2xl" my="auto" textAlign="10" mt="10">
          Please connect your wallet
        </Heading>
      )}

      {numChainId !== 5 && numChainId !== 31337 && (
        <Heading as="h2" fontSize="2xl" my="auto" textAlign="10" mt="10">
          Invalid chain. Please switch to Goerli
        </Heading>
      )}

      {chainId && account && (
        <Box width="80%" mx="auto">
          <VStack mt="10" spacing="4">
            <Heading as="h4" fontSize="xl">
              Current Epoch details
            </Heading>
            <SimpleGrid
              columns={{ base: 1, md: 3 }}
              gap="6"
              justify="space-evenly"
              mx="auto"
              width="100%">
              <Card mt="10" width="100%">
                <span>
                  <Text fontWeight="bold">Epoch No.</Text>
                  <Text fontSize="2xl">{epoch + 1}</Text>
                </span>
              </Card>
              <Card mt="10" width="100%">
                <span textAlign="center">
                  <Text fontWeight="bold">Pot size</Text>
                  <Text fontSize="2xl">{potSize}</Text>
                </span>
              </Card>
              <Card mt="10" width="100%">
                <span>
                  <Text fontWeight="bold">Pot</Text>
                  <Text fontSize="2xl">{participants}</Text>
                </span>
              </Card>
            </SimpleGrid>
          </VStack>

          <VStack mt="10" spacing="4">
            <Heading as="h4" fontSize="xl">
              Protocol Summary
            </Heading>
            <SimpleGrid
              columns={{ base: 1, md: 3 }}
              gap="6"
              justify="space-evenly"
              width="100%">
              <Card mt="10" width="100%">
                <span>
                  <Text fontWeight="bold">Total Epochs</Text>
                  <Text fontSize="2xl">{epoch}</Text>
                </span>
              </Card>
              <Card mt="10" width="100%">
                <span textAlign="center">
                  <Text fontWeight="bold">Total Rewards</Text>
                  <Text fontSize="2xl">TBD</Text>
                </span>
              </Card>
              <Card mt="10" width="100%">
                <span>
                  <Text fontWeight="bold">Platform Fees</Text>
                  <Text fontSize="2xl">TBD</Text>
                </span>
              </Card>
            </SimpleGrid>
          </VStack>

          <Card mt="10">
            <ProtocolLotteryStats />
          </Card>
        </Box>
      )}
    </Box>
  )
}
