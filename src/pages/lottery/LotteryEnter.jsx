import {
  Box,
  VStack,
  HStack,
  Text,
  Heading,
  OrderedList,
  Link,
  ListItem,
  Tooltip,
  Tag,
  TagLabel,
  Spinner,
  Input,
  SimpleGrid,
  Button,
  Badge,
  FormControl,
  FormLabel,
  useToast,
  FormErrorMessage,
} from "@chakra-ui/react"
import { Card } from "../../components/cards/Card"
import { Moralis, useMoralis, useWeb3Contract } from "react-moralis"
import { getNetworkName } from "../../utils/misc"
import { useForm } from "react-hook-form"
import { useState, useEffect } from "react"
import { CountdownTimer } from "../../components/misc/Countdown"
import { Tile } from "../../components/dashboard/Tile"
import { Link as RouterLink } from "react-router-dom"
import lotteryContractAbi from "../../contracts/localhost_SmartLottery0Kage.json"
import lotteryContractAbiGoerli from "../../contracts/goerli_SmartLottery0Kage.json"
import zeroKageLocalAbi from "../../contracts/localhost_ZeroKageMock.json"
import zeroKageGoerliAbi from "../../contracts/goerli_ZeroKage.json"

import addressList from "../../contracts/addresses.json"
import { ethers } from "ethers"
import { roundDecimals } from "../../utils/web3-formats"
import { dateFormatddMMMyyHHMM } from "../../utils/misc"

export const LotteryEnter = () => {
  const { account, chainId } = useMoralis()

  const networkName = getNetworkName(chainId)
  const numChainId = parseInt(chainId)

  const [allowanceApproved, setAllowanceApproved] = useState(false)
  const [entryFee, setEntryFee] = useState("0")
  const [startDate, setStartDate] = useState(null)
  const [endDate, setEndDate] = useState(null)

  const [numParticipants, setNumParticipants] = useState(0)
  const [numTicketsSold, setNumTicketsSold] = useState(0)
  const [numPlayerTickets, setNumPlayerTickets] = useState(0)
  const [potSize, setPotSize] = useState(0)
  const [isConfirming, setIsConfirming] = useState(false)
  const [updateStats, setUpdateStats] = useState(true)

  const toast = useToast()

  const {
    register,
    handleSubmit,
    setValue,
    formState: { errors },
  } = useForm()

  const { runContractFunction, isFetching, isLoading } = useWeb3Contract()
  const lotteryAbi =
    networkName && networkName === "goerli"
      ? lotteryContractAbiGoerli
      : lotteryContractAbi

  const zKageAbi =
    networkName && networkName === "goerli"
      ? zeroKageGoerliAbi
      : zeroKageLocalAbi
  //***************************** USE EFFECT FUCNTIONS ************/

  useEffect(() => {
    if (!chainId) return
    Promise.all([
      getNumTickets(),
      getPotSize(),
      getPlayerTickets(),
      getParticipants(),
    ])
      .then(([_numTickets, _potSize, _playerTickets, _players]) => {
        setNumTicketsSold(parseInt(_numTickets))
        setPotSize(roundDecimals(ethers.utils.formatEther(_potSize), 6))
        setNumPlayerTickets(parseInt(_playerTickets))
        setNumParticipants(parseInt(_players))
        setUpdateStats(false)
      })
      .catch(errorHandler)
  }, [account, chainId, updateStats])

  useEffect(() => {
    if (!chainId) return

    // get lottery fee here`
    const lotteryAddress = getLotteryAddress()

    const apiParams = { abi: lotteryAbi, contractAddress: lotteryAddress }

    getLotteryFees(apiParams)

    getLotteryStartDate(apiParams)

    getLotteryEndDate(apiParams)
    setAllowanceApproved(false)
  }, [account, chainId])

  //******************************************************* */

  //********************** CALL BACK FUNCTIONS ***************/
  /**
   * @dev handles callback
   * @param {any} response
   */
  const successApproveHandler = async (response) => {
    setIsConfirming(true)

    await response.wait(1)
    setIsConfirming(false)
    toast({
      title: `Token Approved`,
      status: "success",
      description: `Token approved for Lottery. Click on 'Enter' button to participate`,
      isClosable: true,
      duration: 9000,
    })
    setAllowanceApproved(true)
  }

  /**
   * @dev handles successful entry callback
   * @param {any} response
   */
  const successEntryHandler = async (response) => {
    setIsConfirming(true)
    // wait for 1 block confirmation
    const txnReceipt = await response.wait(1)
    setIsConfirming(false)
    setAllowanceApproved(false)
    setValue("numTickets", null)

    // insert success notification here
    toast({
      title: `Success`,
      status: "success",
      description: `Lottery entry successful. Txn hash ${txnReceipt.transactionHash}`,
      isClosable: true,
      duration: 9000,
    })
    setUpdateStats(true)
  }

  /**
   * @notice handles errors generated by any API function
   * @param {any} e error description
   */
  const errorHandler = (e) => {
    // insert error notification here
    const errorMsg = e.message

    toast({
      title: `Error`,
      status: "error",
      description: errorMsg,
      isClosable: true,
      duration: 9000,
    })
    setIsConfirming(false)
    // insert error notification here
  }

  //----------------------------------------------------------/

  //********************* API FUNCTIONS ************************ */

  /**
   * @notice API function to update lottery fees
   */
  const getLotteryFees = async (params) => {
    // get entry fee
    const lotteryParams = {
      ...params,
      functionName: "getLotteryFee",
      params: {},
    }

    runContractFunction({
      params: lotteryParams,
      onSuccess: (value) => {
        setEntryFee(roundDecimals(ethers.utils.formatEther(value), 6))
      },
      onError: errorHandler,
    })
  }

  /**
   * @notice update lottery start date
   */

  const getLotteryStartDate = async (params) => {
    const startDateParams = {
      ...params,
      functionName: "getStartTime",
      params: {},
    }

    runContractFunction({
      params: startDateParams,
      onSuccess: (value) => {
        const newDate = new Date(parseInt(value) * 1000)
        setStartDate(newDate)
      },
    })
  }

  /**
   * @notice update lottery end date
   */
  const getLotteryEndDate = async (params) => {
    // get end date
    const endDateParams = {
      ...params,
      functionName: "getEndTime",
      params: {},
    }

    runContractFunction({
      params: endDateParams,
      onSuccess: (value) => {
        const newDate = new Date(parseInt(value) * 1000)
        setEndDate(newDate)
        console.log("end Date", newDate)
      },
    })
  }

  const getParticipants = async () => {
    const lotteryAddress = getLotteryAddress()
    const apiParams = { abi: lotteryAbi, contractAddress: lotteryAddress }

    // get num participants
    const participantParams = {
      ...apiParams,
      functionName: "getPlayers",
      params: {},
    }

    return runContractFunction({
      params: participantParams,
    })
  }

  const getNumTickets = async () => {
    const lotteryAddress = getLotteryAddress()
    const apiParams = { abi: lotteryAbi, contractAddress: lotteryAddress }
    const numTicketParams = {
      ...apiParams,
      functionName: "getTotalTicketsIssued",
      params: {},
    }

    return runContractFunction({
      params: numTicketParams,
    })
  }

  const getPotSize = async () => {
    const lotteryAddress = getLotteryAddress()
    const apiParams = { abi: lotteryAbi, contractAddress: lotteryAddress }
    // get end date
    const potParams = {
      ...apiParams,
      functionName: "getLotteryValue",
      params: {},
    }

    return runContractFunction({
      params: potParams,
    })
  }

  const getPlayerTickets = async () => {
    const lotteryAddress = getLotteryAddress()
    const apiParams = { abi: lotteryAbi, contractAddress: lotteryAddress }

    const ticketParams = {
      ...apiParams,
      functionName: "getNumTickets",
      params: {},
    }

    return runContractFunction({
      params: ticketParams,
    })
  }

  const enterLottery = (values) => {
    if (!allowanceApproved) {
      seekApproval(values)
    } else {
      const lotteryAddress = getLotteryAddress()
      const apiParams = { abi: lotteryAbi, contractAddress: lotteryAddress }

      const enterOptions = {
        ...apiParams,
        functionName: "enterLottery",
        params: {
          _numTickets: values.numTickets,
        },
      }

      runContractFunction({
        params: enterOptions,
        onSuccess: successEntryHandler,
        onError: errorHandler,
      })
    }
  }

  const seekApproval = (values) => {
    if (!chainId) return
    const approvalAmount = values.numTickets * parseFloat(entryFee)
    const tokenAmount = ethers.utils.parseEther(approvalAmount.toString())

    const approvalOptions = {
      abi: zKageAbi,
      contractAddress: getTokenAddress(),
      params: { spender: getLotteryAddress(), amount: tokenAmount },
      functionName: "approve",
    }
    console.log("approval params", approvalOptions)
    runContractFunction({
      params: approvalOptions,
      onSuccess: successApproveHandler,
      onError: errorHandler,
    })
  }

  //-------------------------------------------------------------/

  // **************** HELPER FUNCTIONS ***************************/

  const getTokenAddress = () => {
    if (!chainId) return null
    const chainIdString = parseInt(chainId)
    console.log(
      "zero kage address",
      addressList[chainIdString]["ZeroKageMock"][0]
    )
    return addressList[chainIdString]["ZeroKageMock"][0]
  }

  const getLotteryAddress = () => {
    if (!chainId) return null
    const chainIdString = parseInt(chainId)
    return addressList[chainIdString]["SmartLottery0Kage"][0]
  }

  // -----------------------------------------------------------//

  return (
    // <div>dfddff</div>
    <Box as="section" height="100vh" width="100%" overflowY="auto" mx="auto">
      {(!account || !chainId) && (
        <Heading as="h2" fontSize="2xl" my="auto" textAlign="10" mt="10">
          Please connect your wallet
        </Heading>
      )}

      {numChainId !== 5 && numChainId !== 31337 && (
        <Heading as="h2" fontSize="2xl" my="auto" textAlign="10" mt="10">
          Invalid chain. Please switch to Goerli
        </Heading>
      )}
      {chainId && account && (
        <SimpleGrid columns={{ base: 1, md: 2 }} gap="6" width="inherit">
          <Card mt="10" width="600px">
            <Text fontSize="md" fontWeight="bold">
              Decentralized Lottery Rules
            </Text>

            <OrderedList mt="4" spacing="4">
              <ListItem>Lottery only works on Goerli network</ListItem>
              <ListItem>
                Entry fees and rewards paid in 0KAGE token. Go to{" "}
                <Link as={RouterLink} to="/dex/swap" color="blue">
                  DEX
                </Link>{" "}
                to get 0KAGE tokens
              </ListItem>
              <ListItem>Lottery duration is 24 hours</ListItem>
              <ListItem>Lottery starts at 00:00 hrs UTC</ListItem>
              <ListItem>Lottery ends at 23:45 hrs UTC</ListItem>

              <ListItem>
                Winner is chosen randomly using Chainlink VRF Random Number
                generator
              </ListItem>
              <ListItem>Winner is decided within 15 mins</ListItem>
              <ListItem>
                User will have to withdraw proceeds. No automatic transfer
              </ListItem>
              <ListItem>
                Changes in lottery will be voted via governance
              </ListItem>
            </OrderedList>
          </Card>
          <VStack>
            <Card mt="10" width="400px">
              <HStack spacing="4">
                <Text fontSize="md" fontWeight="bold">
                  Enter Lottery
                </Text>
                <Tag variant="outline" colorScheme="blue" size="md">
                  <TagLabel>{`Fee: ${entryFee} 0KAGE per ticket`}</TagLabel>
                </Tag>
              </HStack>

              <form onSubmit={handleSubmit(enterLottery)}>
                <FormControl mt="6" isInvalid={Object.entries(errors).length}>
                  <HStack spacing="4">
                    <FormLabel>Tickets</FormLabel>
                    <VStack>
                      <Input
                        placeholder="Enter tickets to buy"
                        {...register("numTickets", {
                          required: {
                            value: true,
                            message: "Specify amount to stake",
                          },
                        })}
                      />
                      <FormErrorMessage>
                        {errors?.stakeValue?.message}
                      </FormErrorMessage>
                    </VStack>
                  </HStack>
                </FormControl>
                <VStack spacing="2" mt="10" width="100%">
                  {!allowanceApproved && (
                    <Tooltip label="You need to first approve this contract to access 0Kage tokens in your wallet">
                      <Button type="submit" variant="outline" width="inherit">
                        {isFetching || isLoading || isConfirming ? (
                          <Spinner
                            thickness="4px"
                            speed="0.65s"
                            emptyColor="gray.200"
                            color="blue.500"
                            size="md"
                          />
                        ) : (
                          "Approve"
                        )}
                      </Button>
                    </Tooltip>
                  )}
                  {allowanceApproved && (
                    <Tooltip label="You can now spend 0Kage tokens you approved in previous step">
                      <Button
                        type="submit"
                        colorScheme="blue"
                        variant="solid"
                        width="inherit">
                        {isFetching || isLoading || isConfirming ? (
                          <Spinner
                            thickness="4px"
                            speed="0.65s"
                            emptyColor="gray.200"
                            color="blue.500"
                            size="md"
                          />
                        ) : (
                          "Enter Lottery"
                        )}
                      </Button>
                    </Tooltip>
                  )}
                </VStack>
              </form>
            </Card>
            <Card mt="10" width="400px">
              <VStack>
                <HStack justify="space-between">
                  <Text fontSize="sm">Started at: </Text>
                  <Badge>{dateFormatddMMMyyHHMM(startDate)}</Badge>
                </HStack>

                <Text fontSize="md" fontWeight="bold">
                  Closes in
                </Text>
                <CountdownTimer
                  targetDate={endDate ? endDate.getTime() : null}
                  mt="6"
                />
              </VStack>
            </Card>
            <Card mt="10" width="400px">
              <Text fontSize="md" fontWeight="bold">
                Stats for current epoch
              </Text>
              <Tile
                header="# of tickets you hold"
                value={numPlayerTickets}
                mt="2"
              />
              <Tile header="Participants" value={numParticipants} mt="2" />
              <Tile
                header="Total tickets issued"
                value={numTicketsSold}
                mt="2"
              />
              <Tile
                header="Current pot size"
                value={potSize}
                mt="2"
                color="blue"
              />
            </Card>
          </VStack>
        </SimpleGrid>
      )}
    </Box>
  )
}
