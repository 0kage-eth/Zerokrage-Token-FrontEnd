import {
  Box,
  Heading,
  Container,
  Text,
  Button,
  SimpleGrid,
  Center,
  Tabs,
  TabPanel,
  TabList,
  useToast,
  TabPanels,
  Tab,
  Spinner,
  Tooltip,
} from "@chakra-ui/react"
import { useMoralis, useWeb3Contract } from "react-moralis"
import { useState, useEffect } from "react"

import { Card } from "../components/cards/Card"
import { Stat } from "../components/dashboard/Stat"

import stakeLocalAbi from "../contracts/localhost_StakingRewards.json"
import stakeGoerliAbi from "../contracts/goerli_StakingRewards.json"
import { getNetworkName } from "../utils/misc"
import addressList from "../contracts/addresses.json"
import { WaitingModal } from "../components/modals/WaitingModal"

import { ethers } from "ethers"
import { roundDecimals } from "../utils/web3-formats"

export const StakingDashboard = () => {
  //******* State Initialization & Variables ******************//

  const { account, chainId } = useMoralis()
  const [staked, setStaked] = useState("0")
  const [accruedReward, setAccruredReward] = useState("0")
  const [redeemableReward, setRedeemableReward] = useState("0")
  const [updateStats, setUpdateStats] = useState(true)
  const [isConfirming, setIsConfirming] = useState(false)
  const numChainId = parseInt(chainId)
  const chainIdString = chainId && parseInt(chainId)
  const networkName = getNetworkName(chainId)
  const { runContractFunction, isLoading, isFetching } = useWeb3Contract()
  const toast = useToast()

  //******* Contract ABIs and addresses ******************//

  const stakingAbi =
    networkName && networkName === "goerli" ? stakeGoerliAbi : stakeLocalAbi

  const stakeAddress = chainIdString
    ? addressList[chainIdString]["StakingRewards"][0]
    : null

  //-------------------------------------------------------//

  //***************** USE EFFECT FUNCTIONS ***************//

  /**
   * On opening screen, need to calculate following
   *  1. Staked 0Kage
   *  2. Accrued rewards Kage (that will be redeemable if user unstakes)
   *  3. Redeemable rewards Kage (this is 0Kage that is not yet transferred to users)
   */

  useEffect(() => {
    if (updateStats && chainId & account) {
      Promise.all([
        updateStakedBalance(),
        updateAccruedRewards(),
        updateRedeemableRewards(),
      ])
        .then(([stakeOutput, accruedRewardOutput, redeemableRewardOutput]) => {
          setStaked(roundDecimals(ethers.utils.formatEther(stakeOutput), 6))
          setAccruredReward(
            roundDecimals(ethers.utils.formatEther(accruedRewardOutput), 6)
          )
          setRedeemableReward(
            roundDecimals(ethers.utils.formatEther(redeemableRewardOutput), 6)
          )

          setUpdateStats(false)
        })
        .catch(errorHandler)
    }
  }, [account, chainId, updateStats])

  //-----------------------------------------------------------//

  //***************** API FUNCTIONS ***************//

  const updateStakedBalance = () => {
    if (!chainId) return
    const stakeOptions = {
      abi: stakingAbi,
      contractAddress: stakeAddress,
      functionName: "getStakingBalance",
      params: { staker: account },
    }

    return runContractFunction({
      params: stakeOptions,
    })
  }

  const updateAccruedRewards = () => {
    if (!chainId) return
    const accureRewardsOptions = {
      abi: stakingAbi,
      contractAddress: stakeAddress,
      functionName: "getStakerAccruedRewards",
      params: {},
    }

    return runContractFunction({
      params: accureRewardsOptions,
    })
  }

  const updateRedeemableRewards = () => {
    if (!chainId) return
    const redeemableRewardsOptions = {
      abi: stakingAbi,
      contractAddress: stakeAddress,
      functionName: "getStakerReward",
      params: { staker: account },
    }

    return runContractFunction({
      params: redeemableRewardsOptions,
    })
  }

  const redeemRewardsHandler = () => {
    const redeemRewardsOptions = {
      abi: stakingAbi,
      contractAddress: stakeAddress,
      functionName: "distributeReward",
      params: {},
    }

    runContractFunction({
      params: redeemRewardsOptions,
      onSuccess: (response) => {
        redeemResponseHandler(response)
      },
      onError: (e) => console.log(e),
    })
  }
  //----------------------------------------------------------------------//

  //************************ CALL BACK FUNCTIONS **************************/
  const redeemResponseHandler = async (response) => {
    setIsConfirming(true)
    await response.wait(1)
    setIsConfirming(false)
    setUpdateStats(true)
    // setUpdateReward(true)
    // setUpdateAccrued(true)
  }

  /**
   * @notice handles errors generated by any API function
   * @param {any} e error description
   */
  const errorHandler = (e) => {
    // insert error notification here
    const errorMsg = e.message

    toast({
      title: `Error`,
      status: "error",
      description: errorMsg,
      isClosable: true,
      duration: 9000,
    })
    setIsConfirming(false)
    // insert error notification here
  }
  //--------------------------------------------------------------------//

  return (
    <Box as="section" height="100vh" width={1200} overflowY="auto" mx="auto">
      {(!account || !chainId) && (
        <Heading as="h2" fontSize="2xl" my="auto" textAlign="10" mt="10">
          Please connect your wallet
        </Heading>
      )}

      {numChainId !== 5 && numChainId !== 31337 && (
        <Heading as="h2" fontSize="2xl" my="auto" textAlign="10" mt="10">
          Invalid chain. Please switch to Goerli
        </Heading>
      )}

      {(numChainId === 5 || numChainId === 31337) && account && (
        <Container>
          <Card mt="10" width="400">
            <Text fontSize="md" fontWeight="bold">
              Your Stats
            </Text>
            <SimpleGrid columns="3" spacing="10">
              <Stat
                label="Current Staked 0Kage"
                value={staked}
                tooltip="Total 0Kage staked"
              />
              <Stat
                label="Accrued Rewards"
                value={accruedReward - redeemableReward}
                tooltip="Accrued rewards that would become redeemable if user unstakes at this moment"
              />
              <Stat
                label="Redeemable Rewards"
                value={redeemableReward}
                tooltip="Redeemable rewards that user can transfer to her wallet. Click on 'Redeem Rewards' to do so"
              />
            </SimpleGrid>
            <Center>
              <Button
                size="sm"
                colorScheme="blue"
                mt="10"
                onClick={redeemRewardsHandler}
                isDisabled={isFetching || isLoading}>
                {isFetching || isLoading || isConfirming ? (
                  <Spinner
                    thickness="4px"
                    speed="0.65s"
                    emptyColor="gray.200"
                    color="blue.500"
                    size="md"
                  />
                ) : (
                  "Redeem Rewards"
                )}
              </Button>
            </Center>
          </Card>

          <Card mt="10" overflowY="auto">
            <Heading as="h3" fontSize="md">
              History
            </Heading>
            <Tabs mt="4">
              <TabList>
                <Tab>Stake</Tab>
                <Tab>Withdrawals</Tab>
              </TabList>

              <TabPanels>
                <TabPanel>
                  <p>Import stake/unstake txns from Subgraph - TBD</p>
                </TabPanel>
                <TabPanel>
                  <p>Import withdrawal txns from Subgraph - TBD</p>
                </TabPanel>
              </TabPanels>
            </Tabs>
          </Card>
          <WaitingModal
            isOpen={isConfirming}
            network={getNetworkName(chainId)}
          />
        </Container>
      )}
    </Box>
  )
}
