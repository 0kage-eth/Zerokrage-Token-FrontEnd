import {
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  useDisclosure,
  Button,
  useToast,
} from "@chakra-ui/react"
import { useState } from "react"
import { useMoralis, useWeb3Contract } from "react-moralis"
import vestingContractAbi from "../../contracts/localhost_TokenVesting.json"
import addressList from "../../contracts/addresses.json"
import { ethers } from "ethers"
import { roundDecimals } from "../../utils/web3-formats"
import { getNetworkName } from "../../utils/misc"
import { JOBS } from "../../constants"
import { convertMonthsToSeconds } from "../../utils/misc"
import { ProductFeaturesTable } from "../../components/table/VestingAgreementTable"

export const VestingAgreementModal = ({
  isOpen,
  isOpenHandler,
  job,
  updateScheduleHandler,
}) => {
  const { onClose } = useDisclosure()
  const { account, chainId } = useMoralis()
  const networkName = getNetworkName(chainId)
  const [isConfirming, setIsConfirming] = useState(false)

  const { runContractFunction, isLoading, isFetching } = useWeb3Contract()

  // Setting abis and addresses
  const vestingAbi =
    networkName && networkName === "goerli"
      ? vestingContractAbi
      : vestingContractAbi // TO DO - create and insert goerli address

  const toast = useToast()

  //***************** API FUNCTIONS ************** */
  const onSignVesting = async () => {
    const vestingAddress = getVestingAddress()
    const apiParams = { abi: vestingAbi, contractAddress: vestingAddress }
    const startTime = parseInt(new Date().getTime() / 1000)
    if (job) {
      const createScheduleParams = {
        ...apiParams,
        functionName: "createVestingSchedule",
        params: {
          beneficiary: account,
          startTime: startTime,
          cliff: convertMonthsToSeconds(job.cliff),
          duration: convertMonthsToSeconds(job.duration),
          vestingCycle: convertMonthsToSeconds(job.cycle),
          revocable: job.revocable,
          vestedAmount: ethers.utils.parseEther(job.tokens),
          identifier: job.id,
        },
      }

      return runContractFunction({
        params: createScheduleParams,
        onSuccess: vestingCreatedHandler,
        onError: errorHandler,
      })
    }
  }
  //--------------------------------------------------/

  //***************** CALLBACK FUNCTIONS ************** */

  const vestingCreatedHandler = async (response) => {
    setIsConfirming(true)
    await response.wait(1)
    setIsConfirming(false)

    isOpenHandler(false)
    updateScheduleHandler(false)
    toast({
      title: `Congratulations!`,
      status: "success",
      description: `Your vesting schedule is live. You will receive 0Kage tokens for your contribution to 0Kage`,
      isClosable: true,
      duration: 9000,
    })
  }

  /**
   * @notice handles errors generated by any API function
   * @param {any} e error description
   */
  const errorHandler = (e) => {
    // insert error notification here
    const errorMsg = e.message

    toast({
      title: `Error`,
      status: "error",
      description: errorMsg,
      isClosable: true,
      duration: 9000,
    })
    setIsConfirming(false)
    // insert error notification here
  }

  const closeModal = () => {
    isOpenHandler(false)
    onClose()
  }

  //--------------------------------------------------/

  //***************** HELPER FUNCTIONS ************** */

  const getVestingAddress = () => {
    if (!chainId) return null
    const chainIdString = parseInt(chainId)
    return addressList[chainIdString]["TokenVesting"][0]
  }

  //--------------------------------------------------/

  // job is null -> return empty
  if (!job) {
    return <></>
  }

  // return a modal
  return (
    <Modal isOpen={isOpen} onClose={closeModal}>
      <ModalOverlay />
      <ModalContent>
        <ModalHeader>Vesting Terms</ModalHeader>
        <ModalCloseButton />
        <ModalBody>
          <ProductFeaturesTable job={job} />
        </ModalBody>

        <ModalFooter>
          <Button colorScheme="blue" mr={3} onClick={onSignVesting}>
            Sign Contract
          </Button>
          <Button variant="ghost" onClick={onClose}>
            Cancel
          </Button>
        </ModalFooter>
      </ModalContent>
    </Modal>
  )
}
